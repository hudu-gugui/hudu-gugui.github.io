<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HuDu&#39;Blog</title>
  
  <subtitle>Make ardous efforts</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hudu-gugui.github.io/"/>
  <updated>2019-08-09T03:37:38.584Z</updated>
  <id>https://hudu-gugui.github.io/</id>
  
  <author>
    <name>HuDu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>枚举(enum/Enum)</title>
    <link href="https://hudu-gugui.github.io/%E6%9E%9A%E4%B8%BE-enum-Enum.html"/>
    <id>https://hudu-gugui.github.io/枚举-enum-Enum.html</id>
    <published>2019-08-09T03:07:09.000Z</published>
    <updated>2019-08-09T03:37:38.584Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="什么是枚举"><a href="#什么是枚举" class="headerlink" title="什么是枚举"></a>什么是枚举</h1></blockquote><p>枚举指的是Java语言中类的一种，但是这只能够类的对象的个数是有限个</p><blockquote><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1></blockquote><p>一个类只能产生一个对象，不管这类有多少个使用者，这些使用者获取到的对象都是同一个</p><h2 id="定义一个单例模式类："><a href="#定义一个单例模式类：" class="headerlink" title="定义一个单例模式类："></a>定义一个单例模式类：</h2><p>1.构造器私有化<br>2.提供公共的获取该对象的方式</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例模式的类</span></span><br><span class="line"><span class="comment">//懒汉模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Util</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Util u = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Util</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//提供一个公共的访问该对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Util <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u==<span class="keyword">null</span>) u = <span class="keyword">new</span> Util();</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恶汉模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Tool t = <span class="keyword">new</span> Tool();</span><br><span class="line">    <span class="comment">//构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Tool</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//提供一个公共的获取该对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Tool <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h1 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h1></blockquote><p>1.关键字enum 枚举类是一种特殊的类，特殊在默认将构造器私有化以及特殊在枚举类中直接提供了该类的对象，并且该类的对象是由public static final修饰的，自定义的枚举类默认继承自java.lang.Enum类(抽象类)</p><p>2.由于枚举类也是一种特殊的类，所以枚举类中也能定义变量，方法(成员方法，类方法，抽象方法)如果枚举类中有抽象方法，则需要在该枚举类的每个对象上都重写方法</p><p>3.枚举类可以实现接口，但不能继承其它类(默认已经实现了Enum类)；枚举类实现接口之后需要重写接口中的抽象方法，抽线方法中的重写方法有两种形式：<br>&emsp;1.直接在该枚举类中重写，该枚举类的所有<br>&emsp;2.在枚举类的每个对象中重写接口中的抽象方法，每个对象在调用重写的方法时，调用的是</p><p>4.枚举类中可以定义多个构造器，构造器默认是private修饰，或者可以在定义构造器时显示的使用private修饰当定义其它构造器后会覆盖无参构造器，此时枚举类中每个对象就不能通过无参构造器来创建对象:<br>&emsp;1.在枚举类中提供无参构造器(不推荐，因为在枚举类中的构造器时私有的，没有办法再其它类中调用，所以定义的其它构造器是无意义的)<br>&emsp;2.在每个枚举类对象上提供使用其它自定义的构造器创建对象时的参数(实参)；</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;什么是枚举&quot;&gt;&lt;a href=&quot;#什么是枚举&quot; class=&quot;headerlink&quot; title=&quot;什么是枚举&quot;&gt;&lt;/a&gt;什么是枚举&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;枚举指的是Java语言中类的一种，但是这只能够类的对象的个数是有限个&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;一个类只能产生一个对象，不管这类有多少个使用者，这些使用者获取到的对象都是同一个&lt;/p&gt;
&lt;h2 id=&quot;定义一个单例模式类：&quot;&gt;&lt;a href=&quot;#定义一个单例模式类：&quot; class=&quot;headerlink&quot; title=&quot;定义一个单例模式类：&quot;&gt;&lt;/a&gt;定义一个单例模式类：&lt;/h2&gt;&lt;p&gt;1.构造器私有化&lt;br&gt;2.提供公共的获取该对象的方式&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hudu-gugui.github.io/categories/Java/"/>
    
    
      <category term="枚举" scheme="https://hudu-gugui.github.io/tags/%E6%9E%9A%E4%B8%BE/"/>
    
      <category term="enum" scheme="https://hudu-gugui.github.io/tags/enum/"/>
    
  </entry>
  
  <entry>
    <title>泛型</title>
    <link href="https://hudu-gugui.github.io/%E6%B3%9B%E5%9E%8B.html"/>
    <id>https://hudu-gugui.github.io/泛型.html</id>
    <published>2019-08-07T11:40:28.000Z</published>
    <updated>2019-08-09T03:04:41.314Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2></blockquote><p>广泛的类型，类型参数化，所以泛型也称为泛型参数:<t></t></p><blockquote><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2></blockquote><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.t = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-注意"><a href="#2-注意" class="headerlink" title="2.注意"></a>2.注意</h3><p>当有子类继承泛型类，如果在泛型类上没有确定(指定)泛型参数的实际类型，则需要将子类也定义为泛型类型。泛型参数保持一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">A</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  T <span class="title">getObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-泛型类也可以定义泛型参数的抽象类"><a href="#3-泛型类也可以定义泛型参数的抽象类" class="headerlink" title="3.泛型类也可以定义泛型参数的抽象类"></a>3.泛型类也可以定义泛型参数的抽象类</h3><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><h3 id="1-语法-1"><a href="#1-语法-1" class="headerlink" title="1.语法"></a>1.语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-注意-1"><a href="#2-注意-1" class="headerlink" title="2.注意"></a>2.注意</h3><p>当子类实现了该泛型接口以后，如果没有指定泛型参数的实际类型，则该子类也必须定义为泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> <span class="keyword">implements</span> <span class="title">C</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">C</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">C</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><h3 id="1-成员方法-非静态"><a href="#1-成员方法-非静态" class="headerlink" title="1.成员方法(非静态)"></a>1.成员方法(非静态)</h3><p>权限修饰符<t> 返回类型 方法名(T t){</t></p><p>}</p><h3 id="2-类方法-静态方法"><a href="#2-类方法-静态方法" class="headerlink" title="2.类方法(静态方法)"></a>2.类方法(静态方法)</h3><p>1.静态方法中不能直接使用泛型类上的泛型参数：否则需要将该方法也定义为泛型方法，让其泛型类上的泛型参数一致即可，静态方法上的泛型参数可以不用和类上的泛型参数一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">static</span> &lt;Q&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(Q q)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">haah</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//普通方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义泛型方法</span></span><br><span class="line">    &lt;Q&gt;<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T o)</span></span>&#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么使用泛型？"><a href="#为什么使用泛型？" class="headerlink" title="为什么使用泛型？"></a>为什么使用泛型？</h2><p>将错误(异常)出现的时期由运行期转移到编译期</p><h2 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h2><p>当不能给泛型参数传递什么实际的类型时，可以使用通配符”&lt;?&gt;”来表示具体的泛型参数</p><h2 id="泛型限定"><a href="#泛型限定" class="headerlink" title="泛型限定"></a>泛型限定</h2><h3 id="泛型上限"><a href="#泛型上限" class="headerlink" title="泛型上限"></a>泛型上限</h3><p>所传递的参数类型只能是指定的类型本身或者其子类类型<br>&lt;? extends 上限类型&gt;</p><h3 id="泛型下限"><a href="#泛型下限" class="headerlink" title="泛型下限"></a>泛型下限</h3><p>所传递的参数类型只能是指定的类型本身或者其父类类型<br>&lt;? super 下限类型&gt;</p><h3 id="集合中关于泛型通配符和上下限的特殊情况"><a href="#集合中关于泛型通配符和上下限的特殊情况" class="headerlink" title="集合中关于泛型通配符和上下限的特殊情况"></a>集合中关于泛型通配符和上下限的特殊情况</h3><p>集合类在创建对象的时候，如果该集合的泛型参数有通配符，则该集合不能做添加元素的操作，一般只用于接收其它集合的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">List&lt;B&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> C());</span><br><span class="line">        list.add(<span class="keyword">new</span> D());</span><br><span class="line">        g.show2(list);</span><br><span class="line"></span><br><span class="line">        List&lt;?&gt; list1 = g.show3();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    //泛型只要是B类或者B类的子类就行</span></span><br><span class="line"><span class="comment">//    void show(X&lt;? extends B&gt; x)&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(x);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    //泛型要是B类或者B类的父类就行</span></span><br><span class="line"><span class="comment">//    void show1(X&lt;? extends B&gt; x)&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(x);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法中的类型只要是B类或者B类的子类就行</span></span><br><span class="line">    <span class="comment">//当方法参数中有了通配符，集合不能添加，只能获取</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show2</span><span class="params">(List&lt;? extends B&gt; list)</span></span>&#123;</span><br><span class="line"><span class="comment">//        list.add(new B());</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">List <span class="title">show3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">C</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h2 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;广泛的类型，类型参数化，所以泛型也称为泛型参数:&lt;t&gt;&lt;/t&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;泛型类&quot;&gt;&lt;a href=&quot;#泛型类&quot; class=&quot;headerlink&quot; title=&quot;泛型类&quot;&gt;&lt;/a&gt;泛型类&lt;/h2&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;1-语法&quot;&gt;&lt;a href=&quot;#1-语法&quot; class=&quot;headerlink&quot; title=&quot;1.语法&quot;&gt;&lt;/a&gt;1.语法&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; 类名&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; T t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setObj&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T t)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.t = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hudu-gugui.github.io/categories/Java/"/>
    
      <category term="泛型" scheme="https://hudu-gugui.github.io/categories/Java/%E6%B3%9B%E5%9E%8B/"/>
    
    
      <category term="泛型" scheme="https://hudu-gugui.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
      <category term="泛型通配符" scheme="https://hudu-gugui.github.io/tags/%E6%B3%9B%E5%9E%8B%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
    
      <category term="泛型限定" scheme="https://hudu-gugui.github.io/tags/%E6%B3%9B%E5%9E%8B%E9%99%90%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>Java高级编程_集合体系</title>
    <link href="https://hudu-gugui.github.io/Java%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B-%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB.html"/>
    <id>https://hudu-gugui.github.io/Java高级编程-集合体系.html</id>
    <published>2019-08-07T10:13:28.000Z</published>
    <updated>2019-08-07T11:39:13.917Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="集合体系"><a href="#集合体系" class="headerlink" title="集合体系"></a>集合体系</h1></blockquote><p><font size></font><br><strong>1.集合本身就是一个对象，用于存储其它对象；</strong><br><font color="red"><strong>2.集合中只能存储引用类型的数据，不能存储基本数据类型的数据；</strong></font><br><strong>3.集合和数组一样，都可以理解为存储数据的容器;</strong><br><strong>4.Collection集合：学顶层用底层;在单列体系中，Collectoin接口并不是最顶层接口,该接口有一个父接口：Iterable接口(单列集合的最顶层接口);</strong></p><a id="more"></a><h2 id="emsp-1-Iterator接口：迭代器接口：能够对实现了Iterable接口的集合进行遍历访问-迭代-；"><a href="#emsp-1-Iterator接口：迭代器接口：能够对实现了Iterable接口的集合进行遍历访问-迭代-；" class="headerlink" title="&emsp;1.Iterator接口：迭代器接口：能够对实现了Iterable接口的集合进行遍历访问(迭代)；"></a>&emsp;<strong>1.Iterator接口：迭代器接口：能够对实现了Iterable接口的集合进行遍历访问(迭代)；</strong></h2><h2 id="emsp-2-Iterable接口中的方法："><a href="#emsp-2-Iterable接口中的方法：" class="headerlink" title="&emsp;2.Iterable接口中的方法："></a>&emsp;<strong>2.Iterable接口中的方法：</strong></h2><p>&emsp;&emsp;Iterator iterator();<em>//获取迭代器对象，用于迭代遍历，实现了Iterable接口的集合</em></p><h2 id="emsp-3-Iterator接口中的方法："><a href="#emsp-3-Iterator接口中的方法：" class="headerlink" title="&emsp;3.Iterator接口中的方法："></a>&emsp;<strong>3.Iterator接口中的方法：</strong></h2><p>&emsp;&emsp;hasNext();&emsp;<em>//判断有没有下一个元素</em><br>&emsp;&emsp;next();&emsp;<em>//取出下一个元素</em><br>&emsp;&emsp;remove();&emsp;<em>//移除当前获取到的元素</em></p><h2 id="emsp-4-Collection接口中的方法"><a href="#emsp-4-Collection接口中的方法" class="headerlink" title="&emsp;4.Collection接口中的方法:"></a>&emsp;<strong>4.Collection接口中的方法:</strong></h2><p>&emsp;&emsp;add(Object o);&emsp;<em>//添加元素</em><br>&emsp;&emsp;remove(Object o);&emsp;<em>//删除元素</em><br>&emsp;&emsp;size();&emsp;<em>//获取元素个数</em><br>&emsp;&emsp;clear;&emsp;<em>//清空集合</em></p><h2 id="emsp-5-List接口，该类集合表示有序-向集合中添加元素的顺序和从集合中取出元素的顺序时一致的-，可重复的集合-并且集合中的元素可以为null。"><a href="#emsp-5-List接口，该类集合表示有序-向集合中添加元素的顺序和从集合中取出元素的顺序时一致的-，可重复的集合-并且集合中的元素可以为null。" class="headerlink" title="&emsp;5.List接口，该类集合表示有序(向集合中添加元素的顺序和从集合中取出元素的顺序时一致的)，可重复的集合,并且集合中的元素可以为null。"></a>&emsp;<strong>5.List接口，该类集合表示有序(向集合中添加元素的顺序和从集合中取出元素的顺序时一致的)，可重复的集合,并且集合中的元素可以为null。</strong></h2><p>&emsp;&emsp;add(int index,Object o);&emsp;<em>//在指定位置添加元素</em><br>&emsp;&emsp;remove(int index);&emsp;<em>//移除并返回指定位置上的元素</em><br>&emsp;&emsp;set(int index,Object o);&emsp;<em>//修改指定位置的元素</em><br>&emsp;&emsp;get(int index);&emsp;<em>//获取指定位置上的元素</em></p><h2 id="emsp-6-ArrayList类："><a href="#emsp-6-ArrayList类：" class="headerlink" title="&emsp;6.ArrayList类："></a>&emsp;<strong>6.ArrayList类：</strong></h2><p>&emsp;&emsp;List集合的具体实现，底层的实现原理是可变长度的数组；数组中只能添加同一种类型的元素，集合在没有指定泛型(jdk1.5中出现)的情况下可以添加任意引用类型(Object类型，自动转化，向上转型，显示转型)的数据；在没有指定泛型的时候，ArrayList把所有的类型升级为Object类型，本质上，其实还是原来的类型</p><h2 id="emsp-7-List集合元素的迭代遍历："><a href="#emsp-7-List集合元素的迭代遍历：" class="headerlink" title="&emsp;7.List集合元素的迭代遍历："></a>&emsp;<strong>7.List集合元素的迭代遍历：</strong></h2><p>&emsp;&emsp;1.通过索引遍历：<br>&emsp;&emsp;&emsp;&emsp;集合的索引的最小值是0，最大值是size-1;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.size()</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;2.增强for循环遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object o : list)&#123;&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;3.迭代器遍历：<br>&emsp;&emsp;&emsp;&emsp;iterator();能够和该集合相关的迭代器对象(Iterator接口，hasnext，next，remove)；<br>&emsp;&emsp;&emsp;&emsp;listIterator();能够获取和List集合相关的List集合特有的迭代器对象(ListIterator接口)<br>&emsp;&emsp;4.JDK8中的Lambda表达式遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List l = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">//三种表示方法都一样，第三种最简Lambda表达式</span></span><br><span class="line">l.forEach((Object o)-&gt;&#123;</span><br><span class="line">System.out.println(<span class="string">"+++"</span>+o);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">l.forEach((Object o)-&gt; System.out.println(o));</span><br><span class="line"></span><br><span class="line">l.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="emsp-8-LinkList类：底层实现是双向链表"><a href="#emsp-8-LinkList类：底层实现是双向链表" class="headerlink" title="&emsp;8.LinkList类：底层实现是双向链表"></a>&emsp;<strong>8.LinkList类：底层实现是双向链表</strong></h2><p>&emsp;&emsp;该集合做元素的增加和删除比较快，做修改和查询比较慢<br>&emsp;&emsp;ArrayList集合由于底层实现是数组，所以增删比较慢，查询和修改比较快</p><h2 id="emsp-9-Set集合-接口-无序"><a href="#emsp-9-Set集合-接口-无序" class="headerlink" title="&emsp;9.Set集合(接口):无序"></a>&emsp;<strong>9.Set集合(接口):无序</strong></h2><p>&emsp;&emsp;Set集合无序(向集合中添加元素的顺序和取出元素的顺序不一致)并且不可重复，允许null值；Set集合底层的实现是Map集合的Key<br>&emsp;&emsp;1.Set接口：不支持索引操作的集合，没有特有方法<br>&emsp;&emsp;2.HashSet类：对应的底层的实现是HashMap的key，更底层的实现是哈希表：<br>&emsp;&emsp;&emsp;&emsp;增：add();<br>&emsp;&emsp;问：HashSet集合是如何保证元素不可重复的？<br>&emsp;&emsp;答：根据哈希值来判断向HashSet集合中添加的元素是否相同；先判断两个元素是否相同，如果哈希值不同，则是不同的元素，如果哈希值相同(哈希碰撞)，还要通过equals方法判断两个元素是否相等；如果自定义的的类型中重写了生成的哈希值的方法(hashCode方法)和equals方法，则按照重写的方法规则进行比较<br>&emsp;&emsp;如果要字定义重写类中的hashCode方法，最好重写equals方法，重写规则在hashCode方法中，由哪些数据参与产生了哈希值，就在equals方法中使用这些数据进行判断<br>&emsp;&emsp;&emsp;&emsp;删：remove();<br>&emsp;&emsp;&emsp;&emsp;改：直接修改对象的属性即可<br>&emsp;&emsp;&emsp;&emsp;查：迭代遍历查询<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;1.增强for循环<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;2.迭代器<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;3.Lambda表达式</p><h3 id="emsp-9-TreeSet类："><a href="#emsp-9-TreeSet类：" class="headerlink" title="&emsp;9.TreeSet类："></a>&emsp;<strong>9.TreeSet类：</strong></h3><p>&emsp;&emsp;是Set接口的实现类，直接底层实现是Map集合的Key值，底层的实现是二叉树(平衡二叉树/红黑树)，无序不可重复，但是该集合可以对自身存储的元素进行排序，排序依据的是Comparable接口中的ComparaTo方法，只能将实现了的Comparable接口的实现类的对象保存至TreeSet结合中</p><h4 id="1-Comparable接口：此接口让其自实现类具有自我排序性："><a href="#1-Comparable接口：此接口让其自实现类具有自我排序性：" class="headerlink" title="1.Comparable接口：此接口让其自实现类具有自我排序性："></a>1.Comparable接口：此接口让其自实现类具有自我排序性：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ComparaTo</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：int x = a.compareTo(b);</span></span><br><span class="line"><span class="comment">//x&gt;0 a大于b;</span></span><br><span class="line"><span class="comment">//x=0 a等于b;</span></span><br><span class="line"><span class="comment">//x&lt;b a小于b;</span></span><br></pre></td></tr></table></figure><h4 id="3-Comparator接口：此接口能够重写实现了Comparable接口的子实现类的排序规则"><a href="#3-Comparator接口：此接口能够重写实现了Comparable接口的子实现类的排序规则" class="headerlink" title="3.Comparator接口：此接口能够重写实现了Comparable接口的子实现类的排序规则"></a>3.Comparator<t>接口：此接口能够重写实现了Comparable接口的子实现类的排序规则</t></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Compare</span><span class="params">(T t1,T t2)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="4-TreeSet集合中不能添加不同引用类型的数据"><a href="#4-TreeSet集合中不能添加不同引用类型的数据" class="headerlink" title="4.TreeSet集合中不能添加不同引用类型的数据"></a>4.TreeSet集合中不能添加不同引用类型的数据</h4><h4 id="5-TreeSet集合保证元素不可重复的依据是Comparable接口中的CompareTo方法；"><a href="#5-TreeSet集合保证元素不可重复的依据是Comparable接口中的CompareTo方法；" class="headerlink" title="5.TreeSet集合保证元素不可重复的依据是Comparable接口中的CompareTo方法；"></a>5.TreeSet集合保证元素不可重复的依据是Comparable接口中的CompareTo方法；</h4><p>面试题：下面选项中哪些是类 A.B.D<br>A.ArrayList    B.HsahSet<br>C.SortedSet    D.AbstractSet</p><h3 id="emsp-10-Map集合："><a href="#emsp-10-Map集合：" class="headerlink" title="&emsp;10.Map集合："></a>&emsp;<strong>10.Map集合：</strong></h3><p>&emsp;&emsp;双列集合：结合中的元素是K，V成对出现的；Map集合的Key的特性与Set集合的特性完全一致，Map集合Value任意<br>&emsp;&emsp;&emsp;&emsp;1.增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put(Key,Value);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;&emsp;2.删</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remove(key);<span class="comment">//在Map集合中移除指定的key对应的K,V键值对，并且返回value</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;&emsp;3.改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put(Key,Value);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;&emsp;4.查<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;1.将Map集合的所有的Key转化成Set集合(keySet()方法)，遍历Set集合获取每一个key，然后根据Key获取Map集合中对应的Value<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;2.(值集)将Map结合的所有的Value转化为Collection集合(values()方法)Map集合中不能更具Value获取Key<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;3.(键值集)将Map集合的所有元素转化成Set集合(entrySet()方法)，该Set集合中的每个元素都是Map.Entry()类型，Entry表示的是Map集合中的每一个键值对<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;4.Lambda表达式<br>&emsp;&emsp;&emsp;&emsp;5.HashMap:HsahSet对应，键可以为null<br>&emsp;&emsp;&emsp;&emsp;6.TreeMap:TreeSet对应，键不能为null</p><h3 id="emsp-11-Hashtable："><a href="#emsp-11-Hashtable：" class="headerlink" title="&emsp;11.Hashtable："></a>&emsp;<strong>11.Hashtable：</strong></h3><p>&emsp;&emsp;双列集合，线程安全的集合，键值都不能为null</p><h3 id="emsp-12-Properties类："><a href="#emsp-12-Properties类：" class="headerlink" title="&emsp;12.Properties类："></a>&emsp;<strong>12.Properties类：</strong></h3><p>&emsp;&emsp;双列集合，继承至HashTable&lt;Object,Object&gt;;此类常用于在程序中获取或者存储与该程序相关的配置信息</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;集合体系&quot;&gt;&lt;a href=&quot;#集合体系&quot; class=&quot;headerlink&quot; title=&quot;集合体系&quot;&gt;&lt;/a&gt;集合体系&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;font size&gt;&lt;/font&gt;&lt;br&gt;&lt;strong&gt;1.集合本身就是一个对象，用于存储其它对象；&lt;/strong&gt;&lt;br&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;2.集合中只能存储引用类型的数据，不能存储基本数据类型的数据；&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;&lt;strong&gt;3.集合和数组一样，都可以理解为存储数据的容器;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;4.Collection集合：学顶层用底层;在单列体系中，Collectoin接口并不是最顶层接口,该接口有一个父接口：Iterable接口(单列集合的最顶层接口);&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hudu-gugui.github.io/categories/Java/"/>
    
      <category term="集合" scheme="https://hudu-gugui.github.io/categories/Java/%E9%9B%86%E5%90%88/"/>
    
    
      <category term="高级编程" scheme="https://hudu-gugui.github.io/tags/%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Collection" scheme="https://hudu-gugui.github.io/tags/Collection/"/>
    
      <category term="Set集合" scheme="https://hudu-gugui.github.io/tags/Set%E9%9B%86%E5%90%88/"/>
    
      <category term="Map集合" scheme="https://hudu-gugui.github.io/tags/Map%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>字符编码</title>
    <link href="https://hudu-gugui.github.io/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html"/>
    <id>https://hudu-gugui.github.io/字符编码.html</id>
    <published>2019-08-06T06:01:02.000Z</published>
    <updated>2019-08-07T03:30:13.509Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="编码" scheme="https://hudu-gugui.github.io/categories/%E7%BC%96%E7%A0%81/"/>
    
    
      <category term="ASCII" scheme="https://hudu-gugui.github.io/tags/ASCII/"/>
    
      <category term="ISO-8859-1" scheme="https://hudu-gugui.github.io/tags/ISO-8859-1/"/>
    
      <category term="GB2312" scheme="https://hudu-gugui.github.io/tags/GB2312/"/>
    
      <category term="GBK" scheme="https://hudu-gugui.github.io/tags/GBK/"/>
    
      <category term="Unicode" scheme="https://hudu-gugui.github.io/tags/Unicode/"/>
    
      <category term="UTF" scheme="https://hudu-gugui.github.io/tags/UTF/"/>
    
  </entry>
  
  <entry>
    <title>数据类型</title>
    <link href="https://hudu-gugui.github.io/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"/>
    <id>https://hudu-gugui.github.io/数据类型.html</id>
    <published>2019-08-06T03:20:36.000Z</published>
    <updated>2019-08-07T10:48:39.983Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1></blockquote><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>booean:true或false，在JVM中会转换为0或1，1位<br>byte: 8位整数<br>short：16位整数<br>char：16位unicode字符<br>int：32位整数<br>float：32位浮点数<br>double：64位浮点数<br>long：64位整数</p><p>1字节 = 8bit</p><a id="more"></a><p>布尔类型：boolean<br>文本数据类型：char和String，<font color="red">String是一个类，不是基本数据类型</font><br>整数类型：byte、short、int、long<br>浮点数据类型：float、double</p><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>类、接口、数组</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h1&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h2&gt;&lt;p&gt;booean:true或false，在JVM中会转换为0或1，1位&lt;br&gt;byte: 8位整数&lt;br&gt;short：16位整数&lt;br&gt;char：16位unicode字符&lt;br&gt;int：32位整数&lt;br&gt;float：32位浮点数&lt;br&gt;double：64位浮点数&lt;br&gt;long：64位整数&lt;/p&gt;
&lt;p&gt;1字节 = 8bit&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hudu-gugui.github.io/categories/Java/"/>
    
    
      <category term="基本数据类型" scheme="https://hudu-gugui.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="引用数据类型" scheme="https://hudu-gugui.github.io/tags/%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="类型转换" scheme="https://hudu-gugui.github.io/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Java标识、关键字、类型</title>
    <link href="https://hudu-gugui.github.io/Java%E6%A0%87%E8%AF%86%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E7%B1%BB%E5%9E%8B.html"/>
    <id>https://hudu-gugui.github.io/Java标识、关键字、类型.html</id>
    <published>2019-08-05T03:32:09.000Z</published>
    <updated>2019-08-06T03:19:18.567Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1></blockquote><p>用于解释说明性文字，作用：使用部分内容只为程序员可见，不为编译器所编译、虚拟机所执行。<br>&emsp;&emsp;单行注释：//注释文字<br>&emsp;&emsp;多行注释：/<em>注释文字</em>/<br>&emsp;&emsp;文档注释：/**注释文字/</p><p>其中文档注释，当这类注释出现在任何声明(如类的声明、类的成员变量的声明或者类的成员方法的声明)之前时，会作为JavaDoc文档的内容；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@author</span>类的作者</span><br><span class="line"><span class="meta">@version</span>类的版本</span><br><span class="line"><span class="meta">@param</span>方法的参数</span><br><span class="line"><span class="meta">@return</span>方法的返回类型</span><br><span class="line"><span class="meta">@exception</span>方法抛出的异常</span><br><span class="line"><span class="meta">@see</span>另外参照...</span><br><span class="line"><span class="meta">@since</span>从什么时候开始使用的</span><br></pre></td></tr></table></figure><a id="more"></a><p><font size="4">使用javadoc进行编译：</font><br><font color="pink">javadoc -d doc -author -version src/CommentTest.java</font><br><font size="4">或者：</font><br><font color="pink">javadoc -d doc -author -version src/*.java</font></p><blockquote><h1 id="分号、块、空格"><a href="#分号、块、空格" class="headerlink" title="分号、块、空格"></a>分号、块、空格</h1></blockquote><p>(1)每个语句短语以;结束<br>类的声明最后不需要加<br>方法的声明最后不需要加<br>属性的声明最后一定要加<br>(2)代码段以{}结束<br>常见的有：<br>    类的声明后加{}<br>    方法的声明后加{}<br>    注意:代码的{}后面都不加;<br>(3)空白处（空格、tab键、新行和回车（续航符））是无关紧要的。</p><blockquote><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1></blockquote><p>给类，接口，方法，变量名等起名字时使用的字符序列<br>英文大小写字母，数字字符，$和_。<br>不能使用关键字，不能数字开头，区分大小写。</p><blockquote><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1></blockquote><p>Java语言的关键字时程序代码中的特殊字符。包括：<br>类和接口的声明——class,extends,implements,interface<br>包引入和包声明——import,package<br>数据类型——boolean,byte,char,double,float,int,long,short<br>某些数据类型的可选值——false,true,null<br>流程控制——break,case,coutinue,default,do,else,for,return,switch,while<br>异常处理——catch.finally,throw,throws,try<br>修饰符——abstract,final,native,private,protected,public,static,synchronized,transient,colatile<br>操作符——instanceof<br>创建对象——new<br>引用——this,super<br>方法返回类型——void<br><font color="red">goto const(在java中不使用，但是保留为关键字)</font>严格地说，”true”和”false”不是关键字，它们时布尔类型值</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;用于解释说明性文字，作用：使用部分内容只为程序员可见，不为编译器所编译、虚拟机所执行。&lt;br&gt;&amp;emsp;&amp;emsp;单行注释：//注释文字&lt;br&gt;&amp;emsp;&amp;emsp;多行注释：/&lt;em&gt;注释文字&lt;/em&gt;/&lt;br&gt;&amp;emsp;&amp;emsp;文档注释：/**注释文字/&lt;/p&gt;
&lt;p&gt;其中文档注释，当这类注释出现在任何声明(如类的声明、类的成员变量的声明或者类的成员方法的声明)之前时，会作为JavaDoc文档的内容；&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@author&lt;/span&gt;		类的作者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@version&lt;/span&gt;	类的版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@param&lt;/span&gt;		方法的参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@return&lt;/span&gt;		方法的返回类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@exception&lt;/span&gt;	方法抛出的异常&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@see&lt;/span&gt;		另外参照...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@since&lt;/span&gt;		从什么时候开始使用的&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hudu-gugui.github.io/categories/Java/"/>
    
    
      <category term="标识" scheme="https://hudu-gugui.github.io/tags/%E6%A0%87%E8%AF%86/"/>
    
      <category term="关键字" scheme="https://hudu-gugui.github.io/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
      <category term="类型" scheme="https://hudu-gugui.github.io/tags/%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>初识Java</title>
    <link href="https://hudu-gugui.github.io/%E5%88%9D%E8%AF%86Java.html"/>
    <id>https://hudu-gugui.github.io/初识Java.html</id>
    <published>2019-08-01T13:57:57.000Z</published>
    <updated>2019-08-05T05:56:57.180Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="什么是Java？"><a href="#什么是Java？" class="headerlink" title="什么是Java？"></a>什么是Java？</h1></blockquote><p>&emsp;是编程语言<br>&emsp;开发环境：提供了一套应用程序的接口，解压rt.jar，解压src.zip查看源码<br>&emsp;应用程序环境<br>&emsp;并不仅仅是编程语言，而更准确地说是一个生态系统</p><blockquote><h1 id="为什么发明Java？"><a href="#为什么发明Java？" class="headerlink" title="为什么发明Java？"></a>为什么发明Java？</h1></blockquote><p><font size="4">1.提供了一套编译环境</font><br>&emsp;快速发展<br>&emsp;一次编写，到处运行，应用程序跨平台，中间层：给上层应用提供了一套API，针对不同的操作系统提供了JVM<br>&emsp;多线程，程序级别的多线程<br>&emsp;支持动态更新，其中一个发生了改变，这个编译后，其他的额能自动更新。<br><font size="4">2.提供了一个更简单的编程方法</font><br>&emsp;更健壮：没有指针，没有内存管理，面向对象编程<br><font size="4">3.如何实现上述目标的</font><br>&emsp;JVM，垃圾回收机制(Garbage Collection)，代码安全验证</p><a id="more"></a><blockquote><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1></blockquote><h2 id="Java基础分为三部分："><a href="#Java基础分为三部分：" class="headerlink" title="Java基础分为三部分："></a>Java基础分为三部分：</h2><p>&emsp;<font size="4">1.基础语法：</font>基本语句、流程控制<br>&emsp;<font size="4">2.编程思想：</font>面向对象，第一层：封装、继承、多态，第二层：怎么使用面向对象的思想去解决问题。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;第三层：现实问题的处理，如何使用面向对象解决现实问题。<br>&emsp;<font size="4">3.高级应用：</font>线程、网络、IO、XML解析。</p><blockquote><h1 id="Java代码安全"><a href="#Java代码安全" class="headerlink" title="Java代码安全"></a>Java代码安全</h1></blockquote><p><font size="5">Java程序执行流程</font><br>    &emsp;<font size="4">编辑，编译，类加载</font><br>    &emsp;<font size="4">类加载：</font>加载字节码文件<br>    &emsp;<font size="4">字节码验证：</font><br>        &emsp;&emsp;验证代码和虚拟机版本是否匹配，向下兼容<br>        &emsp;&emsp;代码不能破坏系统的完整性,也就是不能操作硬件<br>        &emsp;&emsp;无堆栈上溢和下溢<br>        &emsp;&emsp;参数类型是否正确<br>        &emsp;&emsp;类型转换是否正确<br>    &emsp;<font size="4">类加载器：</font><br>        &emsp;&emsp;1.启动类加载器：rt.jar<br>        &emsp;&emsp;2.扩展类加载器：jre/lib/ext/<br>        &emsp;&emsp;3.系统类加载器：自己的class<br>        &emsp;&emsp;4.网络类加载器：<br>        &emsp;<font size="4">双亲委托机制：</font>自顶向下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Track myTrack = <span class="keyword">new</span> Track();             </span><br><span class="line">    myTrack.setTitle(<span class="string">"Watching The Wheels"</span>);</span><br><span class="line">    Duration myDuration = <span class="keyword">new</span> Duration(<span class="number">0</span>, <span class="number">3</span>, <span class="number">48</span>);</span><br><span class="line">    myTrack.setDuration(myDuration);</span><br><span class="line">    System.out.println(<span class="string">"myTrack is: "</span> + myTrack);   </span><br><span class="line">    System.out.println(<span class="string">"Title = "</span> + myTrack.getTitle());</span><br><span class="line">    System.out.println(<span class="string">"Duration = "</span> + myTrack.getDuration().toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;什么是Java？&quot;&gt;&lt;a href=&quot;#什么是Java？&quot; class=&quot;headerlink&quot; title=&quot;什么是Java？&quot;&gt;&lt;/a&gt;什么是Java？&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;是编程语言&lt;br&gt;&amp;emsp;开发环境：提供了一套应用程序的接口，解压rt.jar，解压src.zip查看源码&lt;br&gt;&amp;emsp;应用程序环境&lt;br&gt;&amp;emsp;并不仅仅是编程语言，而更准确地说是一个生态系统&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&quot;为什么发明Java？&quot;&gt;&lt;a href=&quot;#为什么发明Java？&quot; class=&quot;headerlink&quot; title=&quot;为什么发明Java？&quot;&gt;&lt;/a&gt;为什么发明Java？&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;font size=&quot;4&quot;&gt;1.提供了一套编译环境&lt;/font&gt;&lt;br&gt;&amp;emsp;快速发展&lt;br&gt;&amp;emsp;一次编写，到处运行，应用程序跨平台，中间层：给上层应用提供了一套API，针对不同的操作系统提供了JVM&lt;br&gt;&amp;emsp;多线程，程序级别的多线程&lt;br&gt;&amp;emsp;支持动态更新，其中一个发生了改变，这个编译后，其他的额能自动更新。&lt;br&gt;&lt;font size=&quot;4&quot;&gt;2.提供了一个更简单的编程方法&lt;/font&gt;&lt;br&gt;&amp;emsp;更健壮：没有指针，没有内存管理，面向对象编程&lt;br&gt;&lt;font size=&quot;4&quot;&gt;3.如何实现上述目标的&lt;/font&gt;&lt;br&gt;&amp;emsp;JVM，垃圾回收机制(Garbage Collection)，代码安全验证&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hudu-gugui.github.io/categories/Java/"/>
    
      <category term="初识Java" scheme="https://hudu-gugui.github.io/categories/Java/%E5%88%9D%E8%AF%86Java/"/>
    
    
      <category term="Java" scheme="https://hudu-gugui.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://hudu-gugui.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JDK" scheme="https://hudu-gugui.github.io/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>JDK、JRE、JVM解析</title>
    <link href="https://hudu-gugui.github.io/JDK%E3%80%81JRE%E3%80%81JVM%E8%A7%A3%E6%9E%90.html"/>
    <id>https://hudu-gugui.github.io/JDK、JRE、JVM解析.html</id>
    <published>2019-07-31T07:47:40.000Z</published>
    <updated>2019-08-01T13:05:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h4></blockquote><p><font color="red">指Java开发工具包</font>，包含了Java的开发工具：编译工具，打包工具运行等工具，如javac、java、javadoc等。</p><p>bin:&emsp;java的相关命令，如java  javac  jar  javadoc<br>db:&emsp;java提供的数据库<br>demo/sample:&emsp;java代码的一些示例<br>include:&emsp;C语言的头文件等内容<br>jre:&emsp;java的运行环境<br>lib:&emsp;java所用的基本的jar包</p><a id="more"></a><blockquote><h4 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h4></blockquote><p><font color="red">指Java运行环境</font>，包括JVM和Java的核心库类，如果想要运行一个开发好的应用，只需要安装JRE即可。</p><blockquote><h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4></blockquote><p><font color="red">简称Java虚拟机(java virtual machine)</font>，是用软件来模拟一个虚拟的环境。</p><h5 id="Java虚拟机基本结构"><a href="#Java虚拟机基本结构" class="headerlink" title="Java虚拟机基本结构"></a>Java虚拟机基本结构</h5><p><img src="/images/JVM.png" alt="JVM"></p><h5 id="Java运行基本过程："><a href="#Java运行基本过程：" class="headerlink" title="Java运行基本过程："></a>Java运行基本过程：</h5><p>编写.java文件—&gt;编译为.class文件—&gt;类加载–&gt;字节码验证–&gt;JIT运行<br>字节码验证的内容:<br>&emsp;代码要符合JVM的规范<br>&emsp;代码破坏计算机的系统或者硬件<br>&emsp;栈不能溢出<br>&emsp;方法的参数类型要正确<br>&emsp;类型转换要正确</p><h5 id="类加载"><a href="#类加载" class="headerlink" title="类加载:"></a>类加载:</h5><p>双亲委托机制<br>把我们写好并编译成的.class字节码文件从硬盘中加载到内存</p><h5 id="JVM使用类加载器来完成类加载的过程"><a href="#JVM使用类加载器来完成类加载的过程" class="headerlink" title="JVM使用类加载器来完成类加载的过程"></a>JVM使用类加载器来完成类加载的过程</h5><p>类加载器有:<br>类装载器：（分为4步）1》2》3》4<br>&emsp;1、启动类装载器：bootstrap class loader<br>&emsp;&emsp;&emsp;&emsp;从jdk的安装目录下  jdk/jre/lib/rt.jar<br>&emsp;&emsp;&emsp;&emsp;rt.jar 是个包，放的是Java作为开发环境的所有的库<br>&emsp;2、扩展类装载器：extensible class loader<br>&emsp;&emsp;&emsp;&emsp;从jdk的安装目录下 jdk/jre/lib/ext/*.jar<br>&emsp;&emsp;&emsp;&emsp;jdk下的所有的.jar 文件<br>&emsp;3、系统类装载器：system class loader<br>&emsp;&emsp;&emsp;&emsp;$CLASSPATH<br>&emsp;&emsp;&emsp;&emsp;你所配置的classpath<br>&emsp;4、网络类装载器：network class loader<br>类加载器:从一个指定路径下面去加载代码运行时需要用到的java类</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h4 id=&quot;JDK&quot;&gt;&lt;a href=&quot;#JDK&quot; class=&quot;headerlink&quot; title=&quot;JDK&quot;&gt;&lt;/a&gt;JDK&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;指Java开发工具包&lt;/font&gt;，包含了Java的开发工具：编译工具，打包工具运行等工具，如javac、java、javadoc等。&lt;/p&gt;
&lt;p&gt;bin:&amp;emsp;java的相关命令，如java  javac  jar  javadoc&lt;br&gt;db:&amp;emsp;java提供的数据库&lt;br&gt;demo/sample:&amp;emsp;java代码的一些示例&lt;br&gt;include:&amp;emsp;C语言的头文件等内容&lt;br&gt;jre:&amp;emsp;java的运行环境&lt;br&gt;lib:&amp;emsp;java所用的基本的jar包&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hudu-gugui.github.io/categories/Java/"/>
    
    
      <category term="JDK" scheme="https://hudu-gugui.github.io/tags/JDK/"/>
    
      <category term="JRE" scheme="https://hudu-gugui.github.io/tags/JRE/"/>
    
      <category term="JVM" scheme="https://hudu-gugui.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java环境变量配置</title>
    <link href="https://hudu-gugui.github.io/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.html"/>
    <id>https://hudu-gugui.github.io/Java环境变量配置.html</id>
    <published>2019-07-31T06:54:15.000Z</published>
    <updated>2019-08-05T03:22:19.279Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="Java-HOME"><a href="#Java-HOME" class="headerlink" title="Java_HOME"></a>Java_HOME</h3></blockquote><p>在下方的【系统变量】中，并不存在JAVA_HOME变量,那么我们需要点击【新建】<br>windows:<br>   JAVA_HOME:JDK安装的目录路径<br>   <font color="red">例：D:\Java\jdk1.8.0_151</font></p><p><img src="/images/JAVA_HOME.png" alt="JAVA_HOME"></p><p>用JAVA写的软件都需要本地JDK的支持，它回去找本地配的JAVA_HOME，很多时候是给第三方用的，比如maven，tomcat，hadoop。</p><a id="more"></a><blockquote><h3 id="CLASSPATH"><a href="#CLASSPATH" class="headerlink" title="CLASSPATH"></a>CLASSPATH</h3></blockquote><p>class文件、jar包 的搜索路径。保存的是一些目录和jar文件的地址，这些路径是为java程序在编译和运行时搜索类而用的，为java程序所依赖的接口、类指定一个搜索路径。<font color="red">一般不需要配置，默认值为.当前目录。</font> </p><blockquote><h3 id="PATh"><a href="#PATh" class="headerlink" title="PATh"></a>PATh</h3></blockquote><p>在cmd终端运行dos命令时命令对应一个特定功能，特定功能由对应应用程序实现，PATH里面存放命令的搜索路径。JDK安装目录里面的命令目录。</p><p>同样是在【系统变量中】我们可以看到path变量已经存在，那么我们只需要点击【编辑】，进入path变量的编辑</p><p><img src="/images/PATH1.png" alt="PATH"></p><p>变量名不变，变量值改为【%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;】，最后点击确定。</p><p><img src="/images/PATH2.png" alt="PATH"></p><blockquote><h3 id="测试环境是否配置成功"><a href="#测试环境是否配置成功" class="headerlink" title="测试环境是否配置成功"></a>测试环境是否配置成功</h3></blockquote><p>使用<kbd>Win</kbd>+<kbd>R</kbd> 输入cmd<br>在新打开的命令窗口中输入命令:java或者javac 后看到相应的信息提示即可.<br>  java -version<br><img src="/images/java-version.png" alt="PATH"></p><blockquote><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3></blockquote><p><font color size="4">rt.jar是JAVA基础类库，dt.jar是关于运行环境的类库，tools.jar是工具类库</font><br><font size="4">(1)rt.jar</font><br>&emsp;默认就在Root Classloader的加载路径里面的，而在Claspath配置该变量是不需要的；同时jre/lib目录下的其他jar:jce.jar、jsse.jar、charsets.jar、resources.jar都在Root Classloader中<br><font size="4">(2)tools.jar </font><br>&emsp;是系统用来编译一个类的时候用到的，即执行javac的时候用到javac XXX.java，实际上就是运行 <font color="pink">java -Calsspath=%JAVA_HOME%\lib\tools.jar&emsp;xx.xxx.Main XXX.java</font>，javac就是对上面命令的封装，所以tools.jar也不用加到classpath里面<br><font size="4">(3)dt.jar</font><br>&emsp;是关于运行环境的类库,主要是swing的包，在用到swing时最好加上</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;Java-HOME&quot;&gt;&lt;a href=&quot;#Java-HOME&quot; class=&quot;headerlink&quot; title=&quot;Java_HOME&quot;&gt;&lt;/a&gt;Java_HOME&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;在下方的【系统变量】中，并不存在JAVA_HOME变量,那么我们需要点击【新建】&lt;br&gt;windows:&lt;br&gt;   JAVA_HOME:JDK安装的目录路径&lt;br&gt;   &lt;font color=&quot;red&quot;&gt;例：D:\Java\jdk1.8.0_151&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/JAVA_HOME.png&quot; alt=&quot;JAVA_HOME&quot;&gt;&lt;/p&gt;
&lt;p&gt;用JAVA写的软件都需要本地JDK的支持，它回去找本地配的JAVA_HOME，很多时候是给第三方用的，比如maven，tomcat，hadoop。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hudu-gugui.github.io/categories/Java/"/>
    
      <category term="Java环境配置" scheme="https://hudu-gugui.github.io/categories/Java/Java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="JDK" scheme="https://hudu-gugui.github.io/tags/JDK/"/>
    
      <category term="JRE" scheme="https://hudu-gugui.github.io/tags/JRE/"/>
    
      <category term="Java环境" scheme="https://hudu-gugui.github.io/tags/Java%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hudu-gugui.github.io/hello-world.html"/>
    <id>https://hudu-gugui.github.io/hello-world.html</id>
    <published>2019-07-30T10:26:45.006Z</published>
    <updated>2019-07-30T10:26:45.006Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java学习</title>
    <link href="https://hudu-gugui.github.io/Java%E5%AD%A6%E4%B9%A0.html"/>
    <id>https://hudu-gugui.github.io/Java学习.html</id>
    <published>2019-07-30T01:02:04.000Z</published>
    <updated>2019-07-30T07:25:13.000Z</updated>
    
    <content type="html"><![CDATA[<!-- <iframe width="100%" height="560" src="//player.bilibili.com/player.html?aid=41949084&cid=75021374&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe> --><p><a href="https://www.bilibili.com/" target="_blank" rel="noopener">哔哩哔哩</a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="110" src="//music.163.com/outchain/player?type=4&id=334309073&auto=0&height=90"></iframe><a id="more"></a><p><img src="/images/2.jpg" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;iframe width=&quot;100%&quot; height=&quot;560&quot; src=&quot;//player.bilibili.com/player.html?aid=41949084&amp;cid=75021374&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt; --&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;哔哩哔哩&lt;/a&gt;&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;110&quot; src=&quot;//music.163.com/outchain/player?type=4&amp;id=334309073&amp;auto=0&amp;height=90&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
      <category term="Java" scheme="https://hudu-gugui.github.io/categories/Java/"/>
    
      <category term="初识Java" scheme="https://hudu-gugui.github.io/categories/Java/%E5%88%9D%E8%AF%86Java/"/>
    
    
      <category term="Java" scheme="https://hudu-gugui.github.io/tags/Java/"/>
    
      <category term="Java基础" scheme="https://hudu-gugui.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
